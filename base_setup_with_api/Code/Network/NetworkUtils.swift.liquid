//
//  {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright {{ year }} {{ developer.company }}. All rights reserved.
//

import Moya
import ObjectMapper

protocol ResponseHandler {
    init(response: Response)
    init?(mapFrom response: Response)
}

struct NetworkError: AppError {
    var message: String
    let title: String?
    
    init(title: String? = nil, message: String) {
        self.title = title
        self.message = message
    }
}

extension NetworkError: ResponseHandler {
    
    init(response: Response) {
        self.init(message: "Failed to map data to JSON. JSON: \((try? response.mapString()) ?? "No JSON")")
    }
    
    init?(mapFrom response: Response) {
        guard (try? response.filterSuccessfulStatusCodes()) == nil,
            let  error = try? response.mapJSON() as? [String: Any] else { return nil }
        self.message = NetworkError.getMessage(dictionary: error)
        self.title = nil
    }
    
    private static func getMessage(dictionary: [String: Any]) -> String {
        guard let key = dictionary.keys.first else { return "Unknown Error" }
        if let message = dictionary[key] as? String {
            return message
        } else if let messages = dictionary[key] as? [String], let message = messages.first {
            return message
        } else if let newDictionary = dictionary[key] as? [String: Any] {
            return getMessage(dictionary: newDictionary)
        } else if let newDictionaryFromArray = dictionary[key] as? [[String: Any]], let dictionary = newDictionaryFromArray.first {
            return getMessage(dictionary: dictionary)
        }
        return "Unknown Error"
    }
}

extension Response {
    
    var json: [String: Any]? {
        (try? mapJSON()) as? [String: Any]
    }
}

extension MoyaProvider {
    
    static func authorized(manager: SessionManager) -> MoyaProvider {
        MoyaProvider(plugins: [AuthPlugin(token: manager.retrieveToken())])
    }
}

extension Array where Element: Mappable {
    
    init?(response: Response) {
        guard let json = ((try? response.mapJSON() as? [[String: Any]]) as [[String: Any]]??), let unwrappedData = json else { return nil }
        self.init(JSONArray: unwrappedData)
    }
}

extension Mappable {
    
    init?(response: Response) {
        guard let json = response.json else { return nil }
        self.init(JSON: json)
    }
}